class "PingLib"
function PingLib:CustomPrint(msg) PrintChat("<font color=\"#6699ff\"><b>[PingLib]</b></font> <font color=\"#FFFFFF\">"..msg..".</font>") end
function PingLib:__init()
	local version = "1.00"
	local UPDATE_HOST = "raw.github.com"
	local UPDATE_PATH = "/gmzopper/BoL/master/PingLib.lua".."?rand="..math.random(1,10000)
	local UPDATE_FILE_PATH = SCRIPT_PATH..GetCurrentEnv().FILE_NAME
	local UPDATE_URL = "https://"..UPDATE_HOST..UPDATE_PATH


	local ServerData = GetWebResult(UPDATE_HOST, "/gmzopper/BoL/master/version/PingLib.version")
	if ServerData then
		ServerVersion = type(tonumber(ServerData)) == "number" and tonumber(ServerData) or nil
		if ServerVersion then
			if tonumber(version) < ServerVersion then
				self:CustomPrint("New version available "..ServerVersion)
				self:CustomPrint("Updating, please don't press F9")
				DelayAction(function() DownloadFile(UPDATE_URL, UPDATE_FILE_PATH, function () _AutoupdaterMsg("Successfully updated. ("..version.." => "..ServerVersion.."), press F9 twice to load the updated version.") end) end, 3)
			end
		end
	else
		self:CustomPrint("Error downloading version info")
	end
	
	PingLib.pingOffsets = {{0x00 , 0x6A}, {0x01 , 0x5A}, {0x02 , 0xEA}, {0x03 , 0x05}, {0x04 , 0xA9}, {0x05 , 0x98}, {0x06 , 0xAB}, {0x07 , 0x8C}, {0x08 , 0xB6}, {0x09 , 0xCF}, {0x0A , 0x25}, {0x0B , 0xD2}, {0x0C , 0x7A}, {0x0D , 0x24}, {0x0E , 0xB3}, {0x0F , 0x80}, {0x10 , 0xB1}, {0x11 , 0x42}, {0x12 , 0xF0}, {0x13 , 0xB2}, {0x14 , 0xA4}, {0x15 , 0x72}, {0x16 , 0x66}, {0x17 , 0x83}, {0x18 , 0x65}, {0x19 , 0x7B}, {0x1A , 0x32}, {0x1B , 0x7E}, {0x1C , 0x29}, {0x1D , 0x63}, {0x1E , 0x8E}, {0x1F , 0x31}, {0x20 , 0x40}, {0x21 , 0x6D}, {0x22 , 0xBC}, {0x23 , 0x88}, {0x24 , 0x14}, {0x25 , 0x90}, {0x26 , 0x68}, {0x27 , 0xDD}, {0x28 , 0x84}, {0x29 , 0x92}, {0x2A , 0xC3}, {0x2B , 0x70}, {0x2C , 0x91}, {0x2D , 0x77}, {0x2E , 0x06}, {0x2F , 0xC9}, {0x30 , 0x61}, {0x31 , 0xEB}, {0x32 , 0x4E}, {0x33 , 0x07}, {0x34 , 0xBF}, {0x35 , 0xED}, {0x36 , 0xA8}, {0x37 , 0xC1}, {0x38 , 0x52}, {0x39 , 0x67}, {0x3A , 0xCD}, {0x3B , 0x3A}, {0x3C , 0x9E}, {0x3D , 0xC8}, {0x3E , 0x23}, {0x3F , 0xD7}, {0x40 , 0x1E}, {0x41 , 0xFC}, {0x42 , 0xA0}, {0x43 , 0xD6}, {0x44 , 0x08}, {0x45 , 0x64}, {0x46 , 0x8F}, {0x47 , 0x9B}, {0x48 , 0x48}, {0x49 , 0x60}, {0x4A , 0x6E}, {0x4B , 0x9F}, {0x4C , 0x49}, {0x4D , 0xDC}, {0x4E , 0x53}, {0x4F , 0x73}, {0x50 , 0xC4}, {0x51 , 0xC7}, {0x52 , 0x89}, {0x53 , 0x2E}, {0x54 , 0x6B}, {0x55 , 0xC0}, {0x56 , 0x57}, {0x57 , 0x02}, {0x58 , 0xF1}, {0x59 , 0xA5}, {0x5A , 0x4F}, {0x5B , 0x37}, {0x5C , 0x04}, {0x5D , 0xDA}, {0x5E , 0xCA}, {0x5F , 0xFF}, {0x60 , 0x19}, {0x61 , 0xB5}, {0x62 , 0xDF}, {0x63 , 0x12}, {0x64 , 0x58}, {0x65 , 0x97}, {0x66 , 0x2D}, {0x67 , 0x9D}, {0x68 , 0x0D}, {0x69 , 0xD0}, {0x6A , 0x00}, {0x6B , 0xBB}, {0x6C , 0x4A}, {0x6D , 0x3F}, {0x6E , 0x4B}, {0x6F , 0xE5}, {0x70 , 0x00}, {0x71 , 0xDE}, {0x72 , 0x01}, {0x73 , 0x33}, {0x74 , 0x2B}, {0x75 , 0x09}, {0x76 , 0x87}, {0x77 , 0x51}, {0x78 , 0x0E}, {0x79 , 0xA3}, {0x7A , 0x82}, {0x7B , 0xF7}, {0x7C , 0xE4}, {0x7D , 0x74}, {0x7E , 0xD1}, {0x7F , 0xD9}, {0x80 , 0x5B}, {0x81 , 0x44}, {0x82 , 0x2A}, {0x83 , 0xA7}, {0x84 , 0x41}, {0x85 , 0x45}, {0x86 , 0xC2}, {0x87 , 0x5C}, {0x88 , 0x86}, {0x89 , 0xD5}, {0x8A , 0x20}, {0x8B , 0x50}, {0x8C , 0x2C}, {0x8D , 0x38}, {0x8E , 0x9A}, {0x8F , 0xB7}, {0x90 , 0xAD}, {0x91 , 0x79}, {0x92 , 0x62}, {0x93 , 0xD3}, {0x94 , 0xAF}, {0x95 , 0xE9}, {0x96 , 0x75}, {0x97 , 0x4D}, {0x98 , 0x54}, {0x99 , 0x6C}, {0x9A , 0x22}, {0x9B , 0xE7}, {0x9C , 0x9C}, {0x9D , 0xBD}, {0x9E , 0xAE}, {0x9F , 0x1A}, {0xA0 , 0x3D}, {0xA1 , 0xB0}, {0xA2 , 0x1B}, {0xA3 , 0xFB}, {0xA4 , 0x28}, {0xA5 , 0x1F}, {0xA6 , 0x69}, {0xA7 , 0x0C}, {0xA8 , 0x0B}, {0xA9 , 0xFA}, {0xAA , 0xBA}, {0xAB , 0xE0}, {0xAC , 0x5F}, {0xAD , 0x18}, {0xAE , 0x1D}, {0xAF , 0x93}, {0xB0 , 0x59}, {0xB1 , 0xF8}, {0xB2 , 0x94}, {0xB3 , 0xBE}, {0xB4 , 0x1C}, {0xB5 , 0x34}, {0xB6 , 0x8D}, {0xB7 , 0xEF}, {0xB8 , 0x21}, {0xB9 , 0x10}, {0xBA , 0xDB}, {0xBB , 0xC6}, {0xBC , 0x8A}, {0xBD , 0x03}, {0xBE , 0xE8}, {0xBF , 0x36}, {0xC0 , 0xFD}, {0xC1 , 0x3B}, {0xC2 , 0x35}, {0xC3 , 0x16}, {0xC4 , 0xFE}, {0xC5 , 0x43}, {0xC6 , 0xF2}, {0xC7 , 0xE1}, {0xC8 , 0x39}, {0xC9 , 0x47}, {0xCA , 0x8B}, {0xCB , 0xD8}, {0xCC , 0x0A}, {0xCD , 0xF3}, {0xCE , 0xE2}, {0xCF , 0x3E}, {0xD0 , 0xAA}, {0xD1 , 0x11}, {0xD2 , 0xEE}, {0xD3 , 0x27}, {0xD4 , 0xC5}, {0xD5 , 0xE6}, {0xD6 , 0x5E}, {0xD7 , 0x76}, {0xD8 , 0x95}, {0xD9 , 0xA1}, {0xDA , 0x13}, {0xDB , 0x5D}, {0xDC , 0x7C}, {0xDD , 0x46}, {0xDE , 0x71}, {0xDF , 0x15}, {0xE0 , 0x6F}, {0xE1 , 0x17}, {0xE2 , 0x55}, {0xE3 , 0xF6}, {0xE4 , 0xB4}, {0xE5 , 0xB9}, {0xE6 , 0x81}, {0xE7 , 0x78}, {0xE8 , 0xF9}, {0xE9 , 0x26}, {0xEA , 0x3C}, {0xEB , 0x2F}, {0xEC , 0xF5}, {0xED , 0xAC}, {0xEE , 0x7D}, {0xEF , 0xA2}, {0xF0 , 0x7F}, {0xF1 , 0xA6}, {0xF2 , 0xCE}, {0xF3 , 0xD4}, {0xF4 , 0xEC}, {0xF5 , 0xF4}, {0xF6 , 0x30}, {0xF7 , 0xE3}, {0xF8 , 0xCB}, {0xF9 , 0xCC}, {0xFA , 0x0F}, {0xFB , 0x56}, {0xFC , 0x85}, {0xFD , 0x96}, {0xFE , 0x99}, {0xFF , 0x4C}, }

	_G.ASSISTME = 0x68
	_G.NORMAL = 0x69
	_G.MISSING = 0x08
	_G.DANGER = 0xE8
	_G.ONMYWAY = 0xE9
end

function PingLib:Ping(pingType, x, y, z)
	local p = CLoLPacket(0x00AB)
	p.vTable = 0xF39744
	
	for i = 1, 4 do	p:Encode1(0x00)	end
	for i = 1, 4 do	p:Encode1(0xE4)	end
	
	p:Encode1(pingType)
	p:EncodeF(x)
	p:EncodeF(z)
	p:EncodeF(y)
	
	for i = 1, 2 do	p:Encode1(0x00)	end
	
	for i = 0, 11 do
		p.pos = 11 + i
		local coord = self:GetByte(p:Decode1())
		
		p.pos = 11 + i
		p:Encode1(coord)
	end
	
	SendPacket(p)
end

function PingLib:GetByte(decoded)
	for i, data in pairs(self.pingOffsets) do
		if data[2] == decoded then
			return data[1]
		end
	end
end